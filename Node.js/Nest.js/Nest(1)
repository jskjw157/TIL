# Nest.js

날짜: 2023년 3월 22일
생성 일시: 2023년 3월 22일 오후 8:25
생성자: JiWon Jeong
최종 편집 일시: 2023년 3월 25일 오후 5:03
최종 편집자: JiWon Jeong
태그: Nest.js, Node.js

## 오늘 공부한 내용 ✏

**NestJS는 효율적이고 확장 가능한 Node.js** 서버 측 애플리케이션을 구축하기 위한 프레임워크이며, **TypeScript**로 구축되어있다. 

공식 문서에서는 JavaScript 언어로 코딩할 수 있다고 한다. 하지만 굳이(?)라는 생각도 든다.  TypeScript로 구축했기 때문에 많은 이점이 있을 것 같다. 먼저 ES 최신 문법들을 직접 Babel을 통해서 변환하지 않아도 된다는 점, 정적 컴파일 언어로 개발 과정에서 명시적으로 자료를 지정해서 오류를 조기에 발견하는 데 도움이 되므로 많은 시간과 노력을 절약할 수 있다.
그리고 OOP를 도와준다는 점에서 스프링과 흡사하기도 하다. 공식 문서에서도 Nest.js에 대해 강조하는 부분이 “**Node(및 서버측 JavaScript)를 위한 우수한 라이브러리, 도우미 및 도구가 많이 존재하지만 그 중 어느 것도 아키텍처**의 주요 문제를 효과적으로 해결하지 못한다”라고 되어있다.
 
내가 느끼기에도 공감이 된다. 왜냐하면 espress로 서버를 만들 때, OOP로 코드를 작성하려니.. 
일일이(?) 하나하나 다 작성해야 된다는 점이 매우 불편했었다. 
마치 Spring의 lombok과 같은 라이브러리가 없나 찾아보기도 하였다.. 존재하기는 한 것 같았지만 사용해보지는 않았다… 하지만 우리의 위대한 Nest.js는 별도의 라이브러리를 설치할 필요 없이 기본적으로 지원이 되며 😚 아직 경험해 보지는 않았지만 다른 프로그래밍 방식도(FP 및 FRP) 지원한다는 점에 있어 훌륭한 Framework가 아닐까(?) 생각이 든다.
~~쉽게 개발 하는게 최고지!!!!!!!!!!!!!!!~~

Nest.js는 의존성 주입, 미들웨어 다중 프로토콜에 대해 지원하며, **확장 가능한 모듈형 아키텍처를 제공**해 개발자가 코드를 쉽게 관리하고 **재사용할 수 있는 모듈**로 쉽게 구성할 수 있다. 이렇게 하면 코드를 더 작고 관리하기 쉬운 부분으로 쉽게 나눌 수 있기 때문에 **대규모 응용프로그램을 개발하고 유지 관리하기가 쉬워지며**, 마이크로 서비스를 구축하기 위해서도 좋다고 한다.

또한 **의존성 주입**을 사용해서 클래스의 인스턴스를 쉽게 만들고 전달할 수 있으므로 코드를 보다 모듈화하고 쉽게 유지 관리할 수 있다. (해당 부분도 Spring과 흡사함을 느꼈다!)
express와 마찬가지로 **다양한 미들웨어**를 지원해서 자유롭게 여러 기능을 추가하고, 특히 인증 및 권한 부여, 로깅, 캐싱 기능을 추가하는데 편리하다!
그리고 HTTP, WebSockets 및 gRPC와 같은 **여러 프로토콜**을 지원한다고 한다. 마이크로 서비스와 실시간 애플리케이션을 구축하기 쉬우며 RESTful API는 물론 복잡한 실시간 시스템 애플리케이션을 구축할 수 있다고 한다.

Nest.js에는 프로그램을 쉽게 만들고 관리할 수 있도록 하는 **Nest.js CLI**와 같은 다양한 도구와 유틸리티가 기본으로 제공된다고 한다. 이 또한 Vue.js를 써 본 경험자 입장으로써 Vue CLI와 비슷한 느낌이 들어 굉장히 친숙했다. 실제로 공식 문서에서도 아키텍처는 Angular에서 크게 영감을 받았다고 한다… Vue도 Angular 자식뻘이니 비슷하지 않을까 싶다?!

Nest.js CLI로 프로젝트 시작하는 방법

```bash
$ npm i -g @nestjs/cli
```

바로 생성하는 법

```bash
$ nest new project-name
```

## 어려웠던 내용 ⚔

HTTP, WebSockets 및 gRPC(얜 멀까..?)에 대해 대략적으로만 알고 있어 학습이 더 필요!

## 궁금한내용 / 부족한 내용 🛡

1. 정적 컴파일 언어와 동적 컴파일 언어의 차이
2. OOP와 FP, FRP의 차이
3. Nest.js CLI

## 느낀점 🎯

express 베이스에 Spring의 DI와 OOP 그리고 모듈식 아키택처를 제공해 마친 신선한 해물 짬뽕 같은 느낌이 든다. 쭈릅..🤤 다양한 미들웨어로 다른 기능을 추가하기도 쉽고, 기본적으로 제공해주는 아키택처와  Nest.js CLI 으로 빠른 생산성을 기대해 볼 수 있는 좋은 프레임워크라 느껴진다. 공식 문서에도 아키택처를 강조하고 있는 이유가 있다. 높은 생산성과 확장성 그리고 쉬운 유지 보수를 제공해준다면 사용을 안 할 수가 없지…😙
빨리 Nest를 사용해보고 싶다. 두근두근..😍 

## 오늘 참고한 자료 📚

Nest.js Document [https://docs.nestjs.com/](https://docs.nestjs.com/)
